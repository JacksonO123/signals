import { Context, State } from "./reactive.js";
import { Accessor, Setter } from "./types.js";
export declare const trackScope: (fn: () => void, registerCleanup?: boolean) => () => void;
export declare const cleanup: (context: Context) => void;
export declare const onCleanup: (fn: () => void) => ((newFn: () => void) => void) | undefined;
export declare const createSignal: <T>(value: T) => [Accessor<T>, Setter<T>];
export declare const createEffect: (fn: () => void) => void;
export declare const cleanupHandler: () => readonly [() => void | undefined, (newCleanup: () => void) => void];
export declare const derived: <T>(fn: () => T) => Accessor<T | null>;
export declare const getSignalInternals: <T>(fn: Accessor<T>) => State<T>;
export declare const createEffectOn: (cb: () => void, deps: Accessor<any>[]) => void;
